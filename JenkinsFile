import groovy.transform.Field

def success() {
  echo "\033[1;32m[Executed Successfully] \033[0m"
}

def error() {
  echo "\033[1;31m[Failed to Execute] \033[0m "
}

def unstable() {
  echo "\033[1;33m[Unstable] \033[0m "
}


List vpc_components=["\"Select:selected\"","\"VPC\"","\"Subnet\"","\"Route Table\"","\"Internet gateway\""]

String aws_components = buildScript(vpc_components)

// Methods to build groovy scripts to populate data
String buildScript(List values){
  return "return $values"
}

properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'AWS Services', 
        script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], 
        script: [classpath: [], sandbox: false,script:  aws_components]]]]),
])

pipeline {
  agent any

  options {
    ansiColor('xterm')
    skipDefaultCheckout(true)
  }

  parameters {
    choice(name: 'REFRESH', choices: ['no', 'yes'], description: 'Please select refresh parameters as Yes if you want to refresh the parameters.')
    booleanParam(name: 'TOGGLE', defaultValue: false, description: 'Are you sure you want to perform this action?')
  }

  stages {
    stage('Refresh Parameters') {
      steps {
        sh 'git version'
      }
    }

    stage('Action Check') {
      steps {
        script {
          if (!params.TOGGLE) {
            sh 'whoami'
            currentBuild.result = 'ABORTED' //If you do not set the toggle flag to true before executing the build action, it will automatically abort the pipeline for any action.
          }
        }
      }
    }

  }
  post {
    success {
      success()
    }
  }
}
